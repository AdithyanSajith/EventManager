require 'rails_helper'

RSpec.describe PaymentsController, type: :controller do
  include Devise::Test::ControllerHelpers
  
  let(:user) { create(:user, :participant) }
  let(:event) { create(:event) }
  let(:registration) { create(:registration, event: event, participant: user.userable) }
  let(:payment) { create(:payment, registration: registration) }
  
  before { sign_in user }
  
  describe 'GET #new' do
  context 'when participant profile exists' do
    before do
      allow(user).to receive(:userable).and_return(create(:participant))
    end

    it 'returns a successful response' do
      get :new, params: { event_id: event.id }
      expect(response).to be_successful
    end

    it 'assigns a new payment to @payment' do
      get :new, params: { event_id: event.id }
      expect(assigns(:payment)).to be_a_new(Payment)
    end
  end

  context 'when participant profile does not exist' do
    before do
      allow(user).to receive(:userable).and_return(nil)
    end

    it 'redirects to root_path with alert' do
      get :new, params: { event_id: event.id }
      expect(response).to redirect_to(root_path)
      expect(flash[:alert]).to eq("Participant profile not found. Please contact support.")
    end
  end
end

describe 'POST #create' do
  context 'when participant profile does not exist' do
    before do
      allow(user).to receive(:userable).and_return(nil)
    end

    it 'redirects to root_path with alert' do
      post :create, params: { event_id: event.id, payment: { amount: 100, card_number: '123', paid_at: Time.current } }
      expect(response).to redirect_to(root_path)
      expect(flash[:alert]).to eq("Participant profile not found. Please contact support.")
    end
  end

  context 'when payment already exists for registration' do
    before do
      allow(user).to receive(:userable).and_return(create(:participant))
      registration.update(payment: payment)
    end

    it 'renders :new with alert' do
      post :create, params: { event_id: event.id, payment: { amount: 100, card_number: '123', paid_at: Time.current } }
      expect(response).to render_template(:new)
      expect(flash.now[:alert]).to eq("You have already completed payment for this event.")
    end
  end
end

describe 'authorization' do
  it 'redirects non-participants to root_path' do
    allow(user).to receive(:role).and_return('host')
    get :index, params: { event_id: event.id }
    expect(response).to redirect_to(root_path)
    expect(flash[:alert]).to eq("Only participants can make payments.")
  end
end

# --- Explanation for your failing tests ---

# 1. TicketsController GET #show returns a successful response
#    - The response is not successful. Check if the ticket exists, if the route is correct, and if authentication/authorization is satisfied.

# 2. Event is valid with valid attributes
#    - Your Event factory is missing required associations: Venue, Category, and Host. Update your factory to provide these.

# 3. Host sets default bio if missing
#    - The Host model does not set a default bio. Add a callback in the Host model:
#      before_save { self.bio ||= 'No bio provided.' }

# 4. Ticket assigns a ticket number before create
#    - Your Registration factory is missing an event association, causing a NOT NULL violation on event_id. Update your registration factory to always associate an event.

# Fix your factories and model callbacks as described above to resolve these errors.
      expect(response).to be_successful
        it 'assigns all payments to @payments' do
      get :index, params: { event_id: event.id }
      expect(assigns(:payments)).to include(payment)
    end
  end

  describe 'GET #show' do
    it 'returns a successful response' do
      get :show, params: { event_id: event.id, id: payment.id }
      puts response.body unless response.successful?
      expect(response).to be_successful
    end

    it 'assigns the requested payment to @payment' do
      get :show, params: { event_id: event.id, id: payment.id }
      expect(assigns(:payment)).to eq(payment)
    end
  end

  describe 'POST #create' do
    let(:valid_attributes) do
      {
        registration_id: registration.id,
        amount: 150.0,
        card_number: '4111111111111111',
        paid_at: Time.current
      }
    end

    it 'creates a new payment with valid attributes' do
      expect {
        post :create, params: { event_id: event.id, payment: valid_attributes }
      }.to change(Payment, :count).by(1)
    end

    it 'does not create a payment with invalid attributes' do
      expect {
        post :create, params: { event_id: event.id, payment: valid_attributes.merge(amount: nil) }
      }.not_to change(Payment, :count)
    end
  end

  describe 'PATCH #update' do
    it 'updates the payment with valid attributes' do
      patch :update, params: { event_id: event.id, id: payment.id, payment: { amount: 200.0 } }
      payment.reload
      expect(payment.amount).to eq(200.0)
    end

    it 'does not update the payment with invalid attributes' do
      patch :update, params: { event_id: event.id, id: payment.id, payment: { amount: nil } }
      payment.reload
      expect(payment.amount).not_to eq(nil)
    end
  end

  describe 'DELETE #destroy' do
    it 'deletes the payment' do
      expect {
        delete :destroy, params: { event_id: event.id, id: payment.id }
      }.to change(Payment, :count).by(-1)
    end

    it 'redirects to payments index after destroy' do
      delete :destroy, params: { event_id: event.id, id: payment.id }
      expect(response).to redirect_to(payments_path)
    end
  end
end


